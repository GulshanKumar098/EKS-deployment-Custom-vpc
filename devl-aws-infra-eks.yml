#### Before Running this template need to create role for EKS and its node Group #####
#### also network paramter using output of VPC stack so need to put stack name while importing ####

AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template For Craeting EKS Control plan, worker nodes"


Parameters:

  env:
    Type: String
    Description: Deployment Environment
    Default: "devl"
  
  awsAcct:
    Type: String
    Description: "AWS Account Number"
    Default: "980664324833"
  
  componentValue:
    Type: String
    Default: "ae-collibra-dq"
  
  clusterName:
    Type: String
    Default: "gulshan-eks-cluster"

  PublicSubnet1:
    Type: String
    Default: "subnet-0115ef8af8ffc75ef"
  
  PublicSubnet2:
    Type: String
    Default: "subnet-08949d3dc3be54e43"
  
  # privateSubnet0:
  #   Type: String
  #   Default: "subnet-01fd2c2546efad5f6"
  
  # privateSubnet1:
  #   Type: String
  #   Default: "subnet-01f4f14af82e13c40"

 

Resources:

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "key for dq eks"
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: "default"
        Statement:
          - Sid: "Key Owner" # root access
            Effect: "Allow"
            Principal:
              "AWS": !Join [":", ["arn:aws:iam:" , !Ref awsAcct , "root"]]
            Action: "kms:*"
            Resource: "*"
      Tags:
        - Key: "Name"
          Value: !Join [ "-", [ !Ref env , "dq-eks-key" ] ]
        - Key: "component"
          Value: !Ref componentValue

  KeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join [ "", [ "alias/" , !Ref env , "-dq-eks-key" ] ]
      TargetKeyId:
        !Ref KMSKey            

  EKSCluster:
    Type: AWS::EKS::Cluster
    DependsOn:
      - KMSKey
      - KeyAlias
    Properties:
      Name: !Join [ "-", [ !Ref env , !Ref clusterName ] ]
      Version: "1.21"
      RoleArn: !Join [":", ["arn:aws:iam:" , !Ref awsAcct , "role/EKSdemorolegulshan"]]
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: audit
            - Type: api
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      ResourcesVpcConfig:
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
        SubnetIds:
          - !Ref PublicSubnet2
          - !Ref PublicSubnet1
        

      EncryptionConfig:
        - Provider:
            KeyArn: !GetAtt KMSKey.Arn
          Resources: 
            - "secrets"
      Tags:
        - Key: "Name"
          Value: !Join [ "-", [ !Ref env , !Ref clusterName ] ]
        - Key: "component"
          Value: !Ref componentValue


  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn:
      - EKSCluster
    Properties:
      NodegroupName: !Join [ "-", [ !Ref env , !Ref clusterName , "node-group" ] ]
      ClusterName: !Join [ "-", [ !Ref env , !Ref clusterName ] ]
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      DiskSize: 200
      ForceUpdateEnabled: false
      InstanceTypes:
      - t3.medium            #r6i.4xlarge
      NodeRole: !Join [":", ["arn:aws:iam:" , !Ref awsAcct , "role/nodedemorolegulshan"]]
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 8
        MinSize: 2

      Subnets:
        - !Ref PublicSubnet2
        - !Ref PublicSubnet1
      

      UpdateConfig:
        MaxUnavailablePercentage: 50
      Tags: 
        Name: !Join [ "-", [ !Ref env , !Ref clusterName ] ]
        component: !Ref componentValue